module.exports = {
    joinNormal: {
        '[member]': (member, guild, invite, inviter, db) => {return `${member}`},
        '[memberId]': (member, guild, invite, inviter, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, invite, inviter, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, invite, inviter, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, invite, inviter, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[createdDate]': (member, guild, invite, inviter, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, invite, inviter, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, invite, inviter, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, invite, inviter, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, invite, inviter, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, invite, inviter, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, invite, inviter, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, invite, inviter, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, invite, inviter, db) => {return `${guild.roles.cache.size}`},
        '[inviter]': (member, guild, invite, inviter, db) => {return `${inviter}`},
        '[inviterId]': (member, guild, invite, inviter, db) => {return `${inviter.id}`},
        '[inviterTag]': (member, guild, invite, inviter, db) => {return `${inviter.tag}`},
        '[inviterUsername]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.get(inviter.id)?.user.username || '-introuvable-'}`},
        '[inviterCreatedDate]': (member, guild, invite, inviter, db) => {return `<t:${inviter.createdTimestamp.toString().slice(0, -3)}>`},
        '[inviterCreatedAt]': (member, guild, invite, inviter, db) => {return `<t:${inviter.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[inviteCode]': (member, guild, invite, inviter, db) => {return `${invite.code}`},
        '[inviteUrl]': (member, guild, invite, inviter, db) => {return `${invite.url}`},
        '[inviteUses]': (member, guild, invite, inviter, db) => {return `${invite.uses}`},
        '[inviteValidCount]': (member, guild, invite, inviter, db) => {return `${invite.data.allvalid}`},
        '[inviteValidNoBonusCount]': (member, guild, invite, inviter, db) => {return `${invite.data.allvalid - invite.data.bonus}`},
        '[inviteLeaveCount]': (member, guild, invite, inviter, db) => {return `${invite.data.invalid}`},
        '[inviteSuspectCount]': (member, guild, invite, inviter, db) => {return `${invite.data.suspect}`},
        '[inviteBonusCount]': (member, guild, invite, inviter, db) => {return `${invite.data.bonus}`},
        '[inviteTotal]': (member, guild, invite, inviter, db) => {return `${invite.data.allinvites}`}
    },
    joinVanity: {
        '[member]': (member, guild, vanity, db) => {return `${member}`},
        '[memberId]': (member, guild, vanity, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, vanity, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, vanity, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, vanity, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[createdDate]': (member, guild, vanity, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, vanity, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, vanity, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, vanity, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, vanity, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, vanity, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, vanity, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, vanity, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, vanity, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, vanity, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, vanity, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, vanity, db) => {return `${guild.roles.cache.size}`},
        '[vanityCode]': (member, guild, vanity, db) => {return `${vanity?.code || '--inconnu--'}`},
        '[vanityUses]': (member, guild, vanity, db) => {return `${vanity?.uses || '--inconnu--'}`}
    },
    joinUnknow: {
        '[member]': (member, guild, db) => {return `${member}`},
        '[memberId]': (member, guild, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[createdDate]': (member, guild, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, db) => {return `${guild.roles.cache.size}`}
    },
    leaveNormal: {
        '[member]': (member, guild, invite, inviter, db) => {return `${member}`},
        '[memberId]': (member, guild, invite, inviter, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, invite, inviter, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, invite, inviter, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, invite, inviter, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[memberJoinDate]': (member, guild, invite, inviter, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}>`},
        '[memberJoinAt]': (member, guild, invite, inviter, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}:R>`},
        '[createdDate]': (member, guild, invite, inviter, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, invite, inviter, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, invite, inviter, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, invite, inviter, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, invite, inviter, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, invite, inviter, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, invite, inviter, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, invite, inviter, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, invite, inviter, db) => {return `${guild.roles.cache.size}`},
        '[inviter]': (member, guild, invite, inviter, db) => {return `${inviter}`},
        '[inviterId]': (member, guild, invite, inviter, db) => {return `${inviter.id}`},
        '[inviterTag]': (member, guild, invite, inviter, db) => {return `${inviter.tag}`},
        '[inviterUsername]': (member, guild, invite, inviter, db) => {return `${guild.members.cache.get(inviter.id)?.user.username || '-introuvable-'}`},
        '[inviterCreatedDate]': (member, guild, invite, inviter, db) => {return `<t:${inviter.createdTimestamp.toString().slice(0, -3)}>`},
        '[inviterCreatedAt]': (member, guild, invite, inviter, db) => {return `<t:${inviter.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[inviteCode]': (member, guild, invite, inviter, db) => {return `${invite.code}`},
        '[inviteUrl]': (member, guild, invite, inviter, db) => {return `${invite.url}`},
        '[inviteUses]': (member, guild, invite, inviter, db) => {return `${invite.uses}`},
        '[inviteValidCount]': (member, guild, invite, inviter, db) => {return `${invite.data.allvalid}`},
        '[inviteValidNoBonusCount]': (member, guild, invite, inviter, db) => {return `${invite.data.allvalid - invite.data.bonus}`},
        '[inviteLeaveCount]': (member, guild, invite, inviter, db) => {return `${invite.data.invalid}`},
        '[inviteSuspectCount]': (member, guild, invite, inviter, db) => {return `${invite.data.suspect}`},
        '[inviteBonusCount]': (member, guild, invite, inviter, db) => {return `${invite.data.bonus}`},
        '[inviteTotal]': (member, guild, invite, inviter, db) => {return `${invite.data.allinvites}`}
    },
    leaveVanity: {
        '[member]': (member, guild, vanity, db) => {return `${member}`},
        '[memberId]': (member, guild, vanity, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, vanity, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, vanity, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, vanity, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[memberJoinDate]': (member, guild, vanity, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}>`},
        '[memberJoinAt]': (member, guild, vanity, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}:R>`},
        '[createdDate]': (member, guild, vanity, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, vanity, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, vanity, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, vanity, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, vanity, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, vanity, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, vanity, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, vanity, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, vanity, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, vanity, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, vanity, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, vanity, db) => {return `${guild.roles.cache.size}`},
        '[vanityCode]': (member, guild, vanity, db) => {return `${vanity?.code || '--inconnu--'}`},
        '[vanityUses]': (member, guild, vanity, db) => {return `${vanity?.uses || '--inconnu--'}`}
    },
    leaveUnknow: {
        '[member]': (member, guild, db) => {return `${member}`},
        '[memberId]': (member, guild, db) => {return `${member.id}`},
        '[memberTag]': (member, guild, db) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, db) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, db) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[memberJoinDate]': (member, guild, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}>`},
        '[memberJoinAt]': (member, guild, db) => {return `<t:${member.joinedTimestamp.toString().slice(0, -3)}:R>`},
        '[createdDate]': (member, guild, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, db) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, db) => {return `${guild.name}`},
        '[serverId]': (member, guild, db) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, db) => {return `${guild.roles.cache.size}`}
    },
    levelUp: {
        '[member]': (member, guild, db, channel) => {return `${member}`},
        '[memberId]': (member, guild, db, channel) => {return `${member.id}`},
        '[memberTag]': (member, guild, db, channel) => {return `${member.user.tag}`},
        '[memberUsername]': (member, guild, db, channel) => {return `${member.user.username}`},
        '[memberTotalJoin]': (member, guild, db, channel) => {return `${db.get(`joincount_${guild.id}_${member.id}`) ?? 0}e`},
        '[createdDate]': (member, guild, db, channel) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}>`},
        '[createdAt]': (member, guild, db, channel) => {return `<t:${member.user.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverName]': (member, guild, db, channel) => {return `${guild.name}`},
        '[serverId]': (member, guild, db, channel) => {return `${guild.id}`},
        '[serverMemberCount]': (member, guild, db, channel) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (member, guild, db, channel) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (member, guild, db, channel) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (member, guild, db, channel) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (member, guild, db, channel) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (member, guild, db, channel) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (member, guild, db, channel) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (member, guild, db, channel) => {return `${guild.roles.cache.size}`},
        '[channel]': (member, guild, db, channel) => {return `${channel}`},
        '[channelId]': (member, guild, db, channel) => {return `${channel.id}`},
        '[channelName]': (member, guild, db, channel) => {return `${channel.name}`},
        '[level]': (member, guild, db, channel) => {return `${db.has(`${guild.id}_${member.id}_level`)?db.get(`${guild.id}_${member.id}_level`):0}`}
    },
    counter: {
        '[serverName]': (guild, db) => {return `${guild.name}`},
        '[serverId]': (guild, db) => {return `${guild.name}`},
        '[serverMemberCount]': (guild, db) => {return `${guild.members.cache.size}`},
        '[serverBotCount]': (guild, db) => {return `${guild.members.cache.filter(m => m.user.bot).size}`},
        '[serverMemberCountNoBot]': (guild, db) => {return `${guild.members.cache.filter(m => !m.user.bot).size}`},
        '[serverCreatedDate]': (guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}>`},
        '[serverCreatedAt]': (guild, db) => {return `<t:${guild.createdTimestamp.toString().slice(0, -3)}:R>`},
        '[serverBoostCount]': (guild, db) => {return `${guild.premiumSubscriptionCount}`},
        '[serverChannelsCount]': (guild, db) => {return `${guild.channels.cache.size}`},
        '[serverRolesCount]': (guild, db) => {return `${guild.roles.cache.size}`},
        '[serverMemberOnline]': (guild, db) => {return `${guild.members.cache.filter(m => m.presence && m.presence.status && m.presence.status !== 'offline').size}`},
        '[serverMemberVocal]': (guild, db) => {return `${guild.members.cache.filter(m => m.voice.channelId).size}`},
        '[serverMemberOffline]': (guild, db) => {return `${guild.members.cache.filter(m => m.presence && m.presence.status && m.presence.status === 'offline').size}`},
        '[serverVanityUse]': (guild, db, vanity) => {return `${vanity?.uses || 'erreur'}`}
    }
}